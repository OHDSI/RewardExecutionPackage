cohort_definition_id,atlas_id,sql,definition,atlas_url
5,17492,,ewoJImNkbVZlcnNpb25SYW5nZSIgOiAiPj01LjAuMCIsCgkiUHJpbWFyeUNyaXRlcmlhIiA6IHsKCQkiQ3JpdGVyaWFMaXN0IiA6IFsKCQkJewoJCQkJIkNvbmRpdGlvbk9jY3VycmVuY2UiIDogewoJCQkJCSJDb2Rlc2V0SWQiIDogMCwKCQkJCQkiRmlyc3QiIDogdHJ1ZSwKCQkJCQkiQ29uZGl0aW9uVHlwZUV4Y2x1ZGUiIDogZmFsc2UKCQkJCX0KCQkJfQoJCV0sCgkJIk9ic2VydmF0aW9uV2luZG93IiA6IHsKCQkJIlByaW9yRGF5cyIgOiAwLAoJCQkiUG9zdERheXMiIDogMAoJCX0sCgkJIlByaW1hcnlDcml0ZXJpYUxpbWl0IiA6IHsKCQkJIlR5cGUiIDogIkZpcnN0IgoJCX0KCX0sCgkiQ29uY2VwdFNldHMiIDogWwoJCXsKCQkJImlkIiA6IDAsCgkJCSJuYW1lIiA6ICJHYXN0cm9pbnRlc3RpbmFsIGhlbW9ycmhhZ2UiLAoJCQkiZXhwcmVzc2lvbiIgOiB7CgkJCQkiaXRlbXMiIDogWwoJCQkJCXsKCQkJCQkJImNvbmNlcHQiIDogewoJCQkJCQkJIkNPTkNFUFRfSUQiIDogMTkyNjcxLAoJCQkJCQkJIkNPTkNFUFRfTkFNRSIgOiAiR2FzdHJvaW50ZXN0aW5hbCBoZW1vcnJoYWdlIiwKCQkJCQkJCSJTVEFOREFSRF9DT05DRVBUIiA6ICJTIiwKCQkJCQkJCSJTVEFOREFSRF9DT05DRVBUX0NBUFRJT04iIDogIlN0YW5kYXJkIiwKCQkJCQkJCSJJTlZBTElEX1JFQVNPTiIgOiAiViIsCgkJCQkJCQkiSU5WQUxJRF9SRUFTT05fQ0FQVElPTiIgOiAiVmFsaWQiLAoJCQkJCQkJIkNPTkNFUFRfQ09ERSIgOiAiNzQ0NzQwMDMiLAoJCQkJCQkJIkRPTUFJTl9JRCIgOiAiQ29uZGl0aW9uIiwKCQkJCQkJCSJWT0NBQlVMQVJZX0lEIiA6ICJTTk9NRUQiLAoJCQkJCQkJIkNPTkNFUFRfQ0xBU1NfSUQiIDogIkNsaW5pY2FsIEZpbmRpbmciCgkJCQkJCX0sCgkJCQkJCSJpc0V4Y2x1ZGVkIiA6IGZhbHNlLAoJCQkJCQkiaW5jbHVkZURlc2NlbmRhbnRzIiA6IHRydWUsCgkJCQkJCSJpbmNsdWRlTWFwcGVkIiA6IGZhbHNlCgkJCQkJfQoJCQkJXQoJCQl9CgkJfQoJXSwKCSJRdWFsaWZpZWRMaW1pdCIgOiB7CgkJIlR5cGUiIDogIkZpcnN0IgoJfSwKCSJFeHByZXNzaW9uTGltaXQiIDogewoJCSJUeXBlIiA6ICJGaXJzdCIKCX0sCgkiSW5jbHVzaW9uUnVsZXMiIDogW10sCgkiQ2Vuc29yaW5nQ3JpdGVyaWEiIDogW10sCgkiQ29sbGFwc2VTZXR0aW5ncyIgOiB7CgkJIkNvbGxhcHNlVHlwZSIgOiAiRVJBIiwKCQkiRXJhUGFkIiA6IDAKCX0sCgkiQ2Vuc29yV2luZG93IiA6IHt9Cn0=,http://atlas.ohdsi.org/WebApi
